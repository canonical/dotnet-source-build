Description: Fix clang 18 build errors
Author: Raphtaliyah <me@raphtaliyah.moe>
Origin: upstream
Bug: https://github.com/dotnet/runtime/pull/94782
Bug-Launchpad: https://bugs.launchpad.net/ubuntu/+source/dotnet8/+bug/2058766
Last-Update: 2024-03-24
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
Index: dotnet8-8.0.103-8.0.3/src/runtime/eng/native/configurecompiler.cmake
===================================================================
--- dotnet8-8.0.103-8.0.3.orig/src/runtime/eng/native/configurecompiler.cmake	2024-03-26 09:48:30.940788182 -0300
+++ dotnet8-8.0.103-8.0.3/src/runtime/eng/native/configurecompiler.cmake	2024-03-26 09:49:44.296792957 -0300
@@ -548,6 +548,11 @@
     add_compile_options(-Wimplicit-fallthrough)
   endif()
 
+  # VLAs are non standard in C++, aren't available on Windows and
+  # are a warning by default since clang 18.
+  # For consistency, enable warnings for all compiler versions.
+  add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-Wvla>)
+
   #These seem to indicate real issues
   add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-Wno-invalid-offsetof>)
 
Index: dotnet8-8.0.103-8.0.3/src/runtime/src/coreclr/gc/unix/gcenv.unix.cpp
===================================================================
--- dotnet8-8.0.103-8.0.3.orig/src/runtime/src/coreclr/gc/unix/gcenv.unix.cpp	2024-03-26 09:48:30.940788182 -0300
+++ dotnet8-8.0.103-8.0.3/src/runtime/src/coreclr/gc/unix/gcenv.unix.cpp	2024-03-26 09:48:30.932788189 -0300
@@ -631,9 +631,9 @@
         if ((int)node <= g_highestNumaNode)
         {
             int usedNodeMaskBits = g_highestNumaNode + 1;
-            int nodeMaskLength = (usedNodeMaskBits + sizeof(unsigned long) - 1) / sizeof(unsigned long);
-            unsigned long nodeMask[nodeMaskLength];
-            memset(nodeMask, 0, sizeof(nodeMask));
+            int nodeMaskLength = usedNodeMaskBits + sizeof(unsigned long) - 1;
+            unsigned long* nodeMask = (unsigned long*)alloca(nodeMaskLength);
+            memset(nodeMask, 0, nodeMaskLength);
 
             int index = node / sizeof(unsigned long);
             nodeMask[index] = ((unsigned long)1) << (node & (sizeof(unsigned long) - 1));
Index: dotnet8-8.0.103-8.0.3/src/runtime/src/coreclr/pal/src/file/path.cpp
===================================================================
--- dotnet8-8.0.103-8.0.3.orig/src/runtime/src/coreclr/pal/src/file/path.cpp	2024-03-26 09:48:30.940788182 -0300
+++ dotnet8-8.0.103-8.0.3/src/runtime/src/coreclr/pal/src/file/path.cpp	2024-03-26 09:48:30.932788189 -0300
@@ -399,8 +399,8 @@
         return 0;
     }
 
-    char TempBuffer[nBufferLength > 0 ? nBufferLength : 1];
-    DWORD dwRetVal = GetTempPathA( nBufferLength, TempBuffer );
+    char* tempBuffer = (char*)alloca(nBufferLength > 0 ? nBufferLength : 1);
+    DWORD dwRetVal = GetTempPathA( nBufferLength, tempBuffer );
 
     if ( dwRetVal >= nBufferLength )
     {
@@ -411,7 +411,7 @@
     else if ( dwRetVal != 0 )
     {
         /* Convert to wide. */
-        if ( 0 == MultiByteToWideChar( CP_ACP, 0, TempBuffer, -1,
+        if ( 0 == MultiByteToWideChar( CP_ACP, 0, tempBuffer, -1,
                                        lpBuffer, dwRetVal + 1 ) )
         {
             ASSERT( "An error occurred while converting the string to wide.\n" );
Index: dotnet8-8.0.103-8.0.3/src/runtime/src/native/minipal/getexepath.h
===================================================================
--- dotnet8-8.0.103-8.0.3.orig/src/runtime/src/native/minipal/getexepath.h	2024-03-26 09:48:30.940788182 -0300
+++ dotnet8-8.0.103-8.0.3/src/runtime/src/native/minipal/getexepath.h	2024-03-26 09:48:30.932788189 -0300
@@ -37,7 +37,7 @@
         return NULL;
     }
 
-    char path_buf[path_length];
+    char* path_buf = (char*)alloca(path_length);
     if (_NSGetExecutablePath(path_buf, &path_length) != 0)
     {
         errno = EINVAL;
Index: dotnet8-8.0.103-8.0.3/src/arcade/eng/common/native/init-compiler.sh
===================================================================
--- dotnet8-8.0.103-8.0.3.orig/src/arcade/eng/common/native/init-compiler.sh	2024-03-08 05:33:13.000000000 -0300
+++ dotnet8-8.0.103-8.0.3/src/arcade/eng/common/native/init-compiler.sh	2024-03-26 09:53:15.109355583 -0300
@@ -125,8 +125,8 @@
     exit 1
 fi
 
-# Only lld version >= 9 can be considered stable. lld doesn't support s390x.
-if [ "$compiler" = "clang" ] && [ -n "$majorVersion" ] && [ "$majorVersion" -ge 9 ] && [ "$build_arch" != "s390x" ]; then
+# Only lld version >= 9 can be considered stable. lld supports s390x starting from 18.0.
+if [ "$compiler" = "clang" ] && [ -n "$majorVersion" ] && [ "$majorVersion" -ge 9 ] && ([ "$build_arch" != "s390x" ] || [ "$majorVersion" -ge 18 ]); then
     if "$CC" -fuse-ld=lld -Wl,--version >/dev/null 2>&1; then
         LDFLAGS="-fuse-ld=lld"
     fi
